Multi-machine talker listener example (`multi_pubsub`)
------------------------------------------------------

This example is a multi-machine example to run Secure ROS using the built-in talker and listener example. This example uses multiple VMs configured to use IPSec and requires Virtualbox, Vagrant and Ansible. Please see the section on :ref:`vagrant_and_ansible` for details on installing and using vagrant and ansible.

The vagrant configuration for this example is loaded from the ``example.yaml`` file ::

  cpus: 1
  memory: 1024
  master_ip_address: 192.168.10.201
  arch: amd64
  pkg: ros-comm
  machines:
    pubsub1: 192.168.10.201
    pubsub2: 192.168.10.202
    pubsub3: 192.168.10.203
    pubsub4: 192.168.10.204

The minimum number of Virtual Machines (VMs) required for the example is 3. pubsub4 may be used as a malicious machine to test Secure ROS and intercept ROS communication. 


Requirements
~~~~~~~~~~~~

The following requirements are needed to run the example. 

* Connection to the internet on the host machine so that vagrant and ansible can fetch the images and debian packages.
* At least N=4 free cores on the host machine 
* At least 4096MB RAM for the guest machines (1024 MB per guest)

If you don't meet the requirements for N=4, you may try with N=3 (3 cores, 3072MB RAM) or use less RAM.

Starting the VMs
~~~~~~~~~~~~~~~~

You may bring up the VMs using the following command. ::

  vagrant up

Vagrant tasks 
^^^^^^^^^^^^^

- Bring up the corresponding VMs as specified in the ``example.yaml`` configuration file.
- Set up the networking as a private network along with appropriate IP addresses as specified in ``example.yaml``.
- Provision the VMs as specified in the ``example.yaml`` and ``secure_ros.yaml`` files.


.. _pubsub_ansible:

Ansible playbooks
^^^^^^^^^^^^^^^^^

- ``plays/install-secure-ros.yaml``: This installs the appropriate Secure ROS package from a deb file. If the deb file is not present, it is is created once (and used from that point).
- ``plays/build-secure-ros.yaml``: This builds the appropriate Secure ROS package and creates the deb file. 
- ``plays/configure-secure-ros.yaml``: This sets up the Secure ROS environment with the appropriate bashrc files containing ROS_IP, ROS_MASTER_URI, location of the source file.
- ``plays/configure-racoon.yaml``: This configures the system security (IPsec) using ``racoon``. The secure keys are created in each VM and the public keys are distributed to all VMs. The racoon and setkey configuration files are also created and the corresponding services are started. This information 

Authorization configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The authorization configuration is in ``ros_auth_multi_pubsub.yaml`` and its contents are presented below. ::

  aliases:
    vm2: [192.168.10.202]
    vm3: [192.168.10.203]
  topics:
    /chatter:
      publishers: [vm2]
      subscribers: [vm3]
    /counter:
      publishers: [vm2]
      subscribers: [vm3]
  nodes:
    /talker: [vm2]
    /listener: [vm3]

Running the example
~~~~~~~~~~~~~~~~~~~

To run the nodes, run the following commands in the different VMs. Note that the correct environment is sourced from the files generated by *ansible*. 

You will be able to ssh into each VM using vagrant from the root of the example folder (where the Vagrantfile is). For instance, to ssh into VM1, use the following command.::

  vagrant ssh pubsub1

On VM1 ::

  ROS_AUTH_FILE=/vagrant/ros_auth_multi_pubsub.yaml roscore

On VM2 ::

  rosrun test_secure_ros talker.py

You may also run the C++ version *instead* of the python version. ::

  rosrun test_secure_ros talker2

On VM3 ::

  rosrun test_secure_ros listener.py

You may also run the C++ version *instead* of the python version. ::

  rosrun test_secure_ros listener2

Test example
~~~~~~~~~~~~
You may test Secure ROS as follows. 

* **Check IPSec:** You may check the communication between VMs using ``tcpdump``. Note that in Ubuntu 16.04, the network device may be named ``enp0s8`` or similar rather than ``eth1``. You may find the name of the device using ``ifconfig`` and checking the device name that has the IP address ``192.168.10.201`` on the guest machine.::

    vagrant ssh pubsub2 
    sudo tcpdump -i eth1

  You should see something like the following. The IP packets exchanged between pubsub2 and pubsub3 (192.168.10.203) are shown with AH (Authentication Headers) and ESP (Encapsulating Security Payload). ::

    [vagrant@pubsub2 ~]$ sudo tcpdump -i eth1
    tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
    listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes
    23:24:01.021656 IP pubsub2 > 192.168.10.203: AH(spi=0x0622f190,seq=0x4e): ESP(spi=0x0914f871,seq=0x4e), length 76
    23:24:01.022429 IP 192.168.10.203 > pubsub2: AH(spi=0x076e48d8,seq=0x50): ESP(spi=0x0c784394,seq=0x50), length 68
    23:24:02.021656 IP pubsub2 > 192.168.10.203: AH(spi=0x0622f190,seq=0x4f): ESP(spi=0x0914f871,seq=0x4f), length 100
    23:24:02.022335 IP 192.168.10.203 > pubsub2: AH(spi=0x076e48d8,seq=0x51): ESP(spi=0x0c784394,seq=0x51), length 68


* **Query rosmaster about topics:** You may query the rosmaster for topics from VM1. All topics are shown. ::

    [vagrant@pubsub1 ~]$ rostopic list 
    /chatter
    /counter
    /rosout
    /rosout_agg

  You may query the rosmaster for topics from VM2. Only topics relevant to VM2 are shown. ::

    [vagrant@pubsub2 ~]$ rostopic list 
    /chatter
    /counter
    /rosout

  You may query the rosmaster for topics from VM4. Zero topics are shown since VM4 is not an authorized IP machine. ::

    [vagrant@pubsub4 ~]$ rostopic list 


* **Starting a node from the wrong machine:** Starting a new node with the same name as an existing node causes the master to send a shutdown signal to the existing node, but this is not allowed if the list of nodes with corresponding IP addresses is present in the authorization file as it is in the example.

  E.g. Launch ``/listener`` from VM3, but with the node name ``/talker``. The node has permission to listen to the topics, but not to have the name ``/talker``. ::

    [vagrant@pubsub3 ~]$ rosrun test_secure_ros listener.py --name talker
    [FATAL] [WallTime: 1490114153.855925] unable to register publication [/rosout] with master: Not authorized
    [FATAL] [WallTime: 1490114153.863927] unable to register service [/talker/get_loggers] with master: Not authorized
    [FATAL] [WallTime: 1490114153.867944] unable to register service [/talker/set_logger_level] with master: Not authorized
    Started node /talker
    Subscribing to /chatter
    [FATAL] [WallTime: 1490114154.377988] unable to register subscription [/chatter] with master: Not authorized
    Subscribing to /counter
    [FATAL] [WallTime: 1490114154.886248] unable to register subscription [/counter] with master: Not authorized

  On the master, you see that the node name registration is denied. ::

    [auth][WARNING] registerPublisher( /talker, /rosout, http://192.168.10.203:48231/, 192.168.10.203 ) caller_id not authorized
    [auth][WARNING] registerSubscriber( /talker, /counter, http://192.168.10.203:48231/, 192.168.10.203 ) caller_id not authorized



* **Subscribing to topics:** You can try to subscribe to a topic from an unauthorized machine. Note that if an IP address is an authorized publisher to a topic, then it is *implicitly* an authorized subscriber. 

  E.g. Run ``listener.py`` from VM2 with anonymous name. ::

    [vagrant@pubsub4 ~]$ rosrun test_secure_ros listener.py --anon 
    FATAL] [WallTime: 1490826202.717182] unable to register publication [/rosout] with master: caller_id not authorized
    [FATAL] [WallTime: 1490826202.723819] unable to register service [/listener_11108_1490826202704/get_loggers] with master: caller_id not authorized
    [FATAL] [WallTime: 1490826202.727966] unable to register service [/listener_11108_1490826202704/set_logger_level] with master: caller_id not authorized
    Started node /listener_11108_1490826202704
    Subscribing to /chatter
    [FATAL] [WallTime: 1490826203.239365] unable to register subscription [/chatter] with master: caller_id not authorized
    Subscribing to /counter
    [FATAL] [WallTime: 1490826203.750798] unable to register subscription [/counter] with master: caller_id not authorized


* **Publishing to topics:**

  You can try to publish to a topic from an unauthorized machine. 
  E.g. Run ``talker.py`` from VM3 with anonymous name. ::


    vagrant@pubsub3 ~]$ rosrun test_secure_ros talker.py --anon
    ...
    Started node /talker_11475_1490827477247
    Publishing to /chatter
    [FATAL] [WallTime: 1490827477.878853] unable to register publication [/chatter] with master: topic not authorized
    Publishing to /counter
    [FATAL] [WallTime: 1490827478.385780] unable to register publication [/counter] with master: topic not authorized

  On the master. ::

    [auth][WARNING] registerPublisher( /talker_11475_1490827477247, /chatter, http://192.168.10.203:37924/, 192.168.10.203 ) topic not authorized
    ...
    [auth][WARNING] registerPublisher( /talker_11475_1490827477247, /counter, http://192.168.10.203:37924/, 192.168.10.203 ) topic not authorized


* **Service client:** You can try to call a service from an unauthorized machine (VM4). 
  E.g. Call ``/talker/get_loggers`` from VM4. ::

    [vagrant@pubsub4 ~]$ rosservice call /talker/get_loggers
    ERROR: Unable to determine type of service [/talker/get_loggers].

  On the master. ::

    [auth][WARNING] lookupService( /rosservice, /talker/get_loggers, 192.168.10.204 ) service not authorized

* **Get parameters:** You can try to get parameter from unauthorized machine (VM4). ::

    [vagrant@pubsub4 ~]$ rosparam list 

  You can try to get parameter from authorized machine (VM2). ::

    [vagrant@pubsub2 ~]$ rosparam get /rosdistro 
    'indigo

      '

* **Set parameters:** You can try to set parameter from unauthorized machine (VM2). ::

    [vagrant@pubsub2 ~]$ rosparam set /rosdistro "jade"
    ...
    rosgraph.masterapi.MasterError: parameter not authorized

  You can try to set parameter from authorized machine (VM1). ::

    [vagrant@pubsub1 ~]$ rosparam get /rosdistro 
    'indigo

      '

    [vagrant@pubsub1 ~]$ rosparam set /rosdistro jade
    [vagrant@pubsub1 ~]$ rosparam get /rosdistro 
    jade

* **Killing nodes:** You can try to kill nodes from an unauthorized machine (only the master machine is allowed to kill nodes). 
  First from VM3. ::

    [vagrant@pubsub3 ~]$ rosnode kill -a 
    killing:
     * /listener
     * /rosout
     * /talker
    ERROR: Failed to kill:
     * /listener
     * /talker
    [vagrant@pubsub3 ~]$ rosnode list 
    /listener
    /rosout
    /talker

  Next from VM1. ::

    [vagrant@pubsub1 ~]$ rosnode kill -a 
    killing:
     * /listener
     * /rosout
     * /talker
    killed
    [vagrant@pubsub1 ~]$ rosnode list 
    /rosout



